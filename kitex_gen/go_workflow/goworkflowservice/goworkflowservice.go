// Code generated by Kitex v0.5.1. DO NOT EDIT.

package goworkflowservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	go_workflow "github.com/hexudonghj/go_workflow/kitex_gen/go_workflow"
)

func serviceInfo() *kitex.ServiceInfo {
	return goWorkflowServiceServiceInfo
}

var goWorkflowServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "go_workflow_service"
	handlerType := (*go_workflow.GoWorkflowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newGoWorkflowServiceAddArgs, newGoWorkflowServiceAddResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "go_workflow",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*go_workflow.GoWorkflowServiceAddArgs)
	realResult := result.(*go_workflow.GoWorkflowServiceAddResult)
	success, err := handler.(go_workflow.GoWorkflowService).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGoWorkflowServiceAddArgs() interface{} {
	return go_workflow.NewGoWorkflowServiceAddArgs()
}

func newGoWorkflowServiceAddResult() interface{} {
	return go_workflow.NewGoWorkflowServiceAddResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *go_workflow.AddRequest) (r *go_workflow.AddResponse, err error) {
	var _args go_workflow.GoWorkflowServiceAddArgs
	_args.Req = req
	var _result go_workflow.GoWorkflowServiceAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
