// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hexudonghj/go_workflow/model/entity"
)

func newActHiProcinst(db *gorm.DB, opts ...gen.DOOption) actHiProcinst {
	_actHiProcinst := actHiProcinst{}

	_actHiProcinst.actHiProcinstDo.UseDB(db, opts...)
	_actHiProcinst.actHiProcinstDo.UseModel(&entity.ActHiProcinst{})

	tableName := _actHiProcinst.actHiProcinstDo.TableName()
	_actHiProcinst.ALL = field.NewAsterisk(tableName)
	_actHiProcinst.ID = field.NewInt64(tableName, "id")
	_actHiProcinst.ProcInstID = field.NewString(tableName, "proc_inst_id")
	_actHiProcinst.ProcDefID = field.NewString(tableName, "proc_def_id")
	_actHiProcinst.ProcDefKey = field.NewString(tableName, "proc_def_key")
	_actHiProcinst.ProcStartTime = field.NewInt64(tableName, "proc_start_time")
	_actHiProcinst.ProcEndTime = field.NewInt64(tableName, "proc_end_time")
	_actHiProcinst.StartUserID = field.NewString(tableName, "start_user_id")
	_actHiProcinst.Status = field.NewString(tableName, "status")
	_actHiProcinst.CreateTime = field.NewTime(tableName, "create_time")
	_actHiProcinst.UpdateTime = field.NewTime(tableName, "update_time")

	_actHiProcinst.fillFieldMap()

	return _actHiProcinst
}

type actHiProcinst struct {
	actHiProcinstDo actHiProcinstDo

	ALL           field.Asterisk
	ID            field.Int64  // 自增主键ID
	ProcInstID    field.String // 流程实例ID
	ProcDefID     field.String // 流程定义ID
	ProcDefKey    field.String // 流程定义KEY
	ProcStartTime field.Int64  // 流程开始时间
	ProcEndTime   field.Int64  // 流程结束时间（如果流程未结束则为-1）
	StartUserID   field.String // 流程发起人ID
	Status        field.String // 流程状态
	CreateTime    field.Time   // 数据创建时间
	UpdateTime    field.Time   // 数据更新时间

	fieldMap map[string]field.Expr
}

func (a actHiProcinst) Table(newTableName string) *actHiProcinst {
	a.actHiProcinstDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actHiProcinst) As(alias string) *actHiProcinst {
	a.actHiProcinstDo.DO = *(a.actHiProcinstDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actHiProcinst) updateTableName(table string) *actHiProcinst {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ProcInstID = field.NewString(table, "proc_inst_id")
	a.ProcDefID = field.NewString(table, "proc_def_id")
	a.ProcDefKey = field.NewString(table, "proc_def_key")
	a.ProcStartTime = field.NewInt64(table, "proc_start_time")
	a.ProcEndTime = field.NewInt64(table, "proc_end_time")
	a.StartUserID = field.NewString(table, "start_user_id")
	a.Status = field.NewString(table, "status")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *actHiProcinst) WithContext(ctx context.Context) *actHiProcinstDo {
	return a.actHiProcinstDo.WithContext(ctx)
}

func (a actHiProcinst) TableName() string { return a.actHiProcinstDo.TableName() }

func (a actHiProcinst) Alias() string { return a.actHiProcinstDo.Alias() }

func (a *actHiProcinst) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actHiProcinst) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["proc_inst_id"] = a.ProcInstID
	a.fieldMap["proc_def_id"] = a.ProcDefID
	a.fieldMap["proc_def_key"] = a.ProcDefKey
	a.fieldMap["proc_start_time"] = a.ProcStartTime
	a.fieldMap["proc_end_time"] = a.ProcEndTime
	a.fieldMap["start_user_id"] = a.StartUserID
	a.fieldMap["status"] = a.Status
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a actHiProcinst) clone(db *gorm.DB) actHiProcinst {
	a.actHiProcinstDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actHiProcinst) replaceDB(db *gorm.DB) actHiProcinst {
	a.actHiProcinstDo.ReplaceDB(db)
	return a
}

type actHiProcinstDo struct{ gen.DO }

func (a actHiProcinstDo) Debug() *actHiProcinstDo {
	return a.withDO(a.DO.Debug())
}

func (a actHiProcinstDo) WithContext(ctx context.Context) *actHiProcinstDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actHiProcinstDo) ReadDB() *actHiProcinstDo {
	return a.Clauses(dbresolver.Read)
}

func (a actHiProcinstDo) WriteDB() *actHiProcinstDo {
	return a.Clauses(dbresolver.Write)
}

func (a actHiProcinstDo) Session(config *gorm.Session) *actHiProcinstDo {
	return a.withDO(a.DO.Session(config))
}

func (a actHiProcinstDo) Clauses(conds ...clause.Expression) *actHiProcinstDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actHiProcinstDo) Returning(value interface{}, columns ...string) *actHiProcinstDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actHiProcinstDo) Not(conds ...gen.Condition) *actHiProcinstDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actHiProcinstDo) Or(conds ...gen.Condition) *actHiProcinstDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actHiProcinstDo) Select(conds ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actHiProcinstDo) Where(conds ...gen.Condition) *actHiProcinstDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actHiProcinstDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *actHiProcinstDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a actHiProcinstDo) Order(conds ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actHiProcinstDo) Distinct(cols ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actHiProcinstDo) Omit(cols ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actHiProcinstDo) Join(table schema.Tabler, on ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actHiProcinstDo) LeftJoin(table schema.Tabler, on ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actHiProcinstDo) RightJoin(table schema.Tabler, on ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actHiProcinstDo) Group(cols ...field.Expr) *actHiProcinstDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actHiProcinstDo) Having(conds ...gen.Condition) *actHiProcinstDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actHiProcinstDo) Limit(limit int) *actHiProcinstDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actHiProcinstDo) Offset(offset int) *actHiProcinstDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actHiProcinstDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *actHiProcinstDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actHiProcinstDo) Unscoped() *actHiProcinstDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actHiProcinstDo) Create(values ...*entity.ActHiProcinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actHiProcinstDo) CreateInBatches(values []*entity.ActHiProcinst, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actHiProcinstDo) Save(values ...*entity.ActHiProcinst) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actHiProcinstDo) First() (*entity.ActHiProcinst, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Take() (*entity.ActHiProcinst, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Last() (*entity.ActHiProcinst, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) Find() ([]*entity.ActHiProcinst, error) {
	result, err := a.DO.Find()
	return result.([]*entity.ActHiProcinst), err
}

func (a actHiProcinstDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ActHiProcinst, err error) {
	buf := make([]*entity.ActHiProcinst, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actHiProcinstDo) FindInBatches(result *[]*entity.ActHiProcinst, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actHiProcinstDo) Attrs(attrs ...field.AssignExpr) *actHiProcinstDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actHiProcinstDo) Assign(attrs ...field.AssignExpr) *actHiProcinstDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actHiProcinstDo) Joins(fields ...field.RelationField) *actHiProcinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actHiProcinstDo) Preload(fields ...field.RelationField) *actHiProcinstDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actHiProcinstDo) FirstOrInit() (*entity.ActHiProcinst, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) FirstOrCreate() (*entity.ActHiProcinst, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActHiProcinst), nil
	}
}

func (a actHiProcinstDo) FindByPage(offset int, limit int) (result []*entity.ActHiProcinst, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actHiProcinstDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actHiProcinstDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actHiProcinstDo) Delete(models ...*entity.ActHiProcinst) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actHiProcinstDo) withDO(do gen.Dao) *actHiProcinstDo {
	a.DO = *do.(*gen.DO)
	return a
}
