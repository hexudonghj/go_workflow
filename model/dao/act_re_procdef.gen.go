// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/hexudonghj/go_workflow/model/entity"
)

func newActReProcdef(db *gorm.DB, opts ...gen.DOOption) actReProcdef {
	_actReProcdef := actReProcdef{}

	_actReProcdef.actReProcdefDo.UseDB(db, opts...)
	_actReProcdef.actReProcdefDo.UseModel(&entity.ActReProcdef{})

	tableName := _actReProcdef.actReProcdefDo.TableName()
	_actReProcdef.ALL = field.NewAsterisk(tableName)
	_actReProcdef.ID = field.NewInt64(tableName, "id")
	_actReProcdef.ProcDefID = field.NewString(tableName, "proc_def_id")
	_actReProcdef.ProcDefKey = field.NewString(tableName, "proc_def_key")
	_actReProcdef.Name = field.NewString(tableName, "name")
	_actReProcdef.Version = field.NewInt32(tableName, "version")
	_actReProcdef.Resource = field.NewString(tableName, "resource")
	_actReProcdef.TenantID = field.NewString(tableName, "tenant_id")
	_actReProcdef.UserID = field.NewString(tableName, "user_id")
	_actReProcdef.DeployTime = field.NewInt64(tableName, "deploy_time")
	_actReProcdef.CreateTime = field.NewTime(tableName, "create_time")
	_actReProcdef.UpdateTime = field.NewTime(tableName, "update_time")

	_actReProcdef.fillFieldMap()

	return _actReProcdef
}

type actReProcdef struct {
	actReProcdefDo actReProcdefDo

	ALL        field.Asterisk
	ID         field.Int64  // 自增主键
	ProcDefID  field.String // 流程定义ID
	ProcDefKey field.String // 流程定义KEY
	Name       field.String // 流程名称
	Version    field.Int32  // 流程版本号
	Resource   field.String // 流程定义资源
	TenantID   field.String // 租户ID
	UserID     field.String
	DeployTime field.Int64 // 流程部署时间
	CreateTime field.Time  // 数据创建时间
	UpdateTime field.Time  // 流程更新时间

	fieldMap map[string]field.Expr
}

func (a actReProcdef) Table(newTableName string) *actReProcdef {
	a.actReProcdefDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actReProcdef) As(alias string) *actReProcdef {
	a.actReProcdefDo.DO = *(a.actReProcdefDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actReProcdef) updateTableName(table string) *actReProcdef {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ProcDefID = field.NewString(table, "proc_def_id")
	a.ProcDefKey = field.NewString(table, "proc_def_key")
	a.Name = field.NewString(table, "name")
	a.Version = field.NewInt32(table, "version")
	a.Resource = field.NewString(table, "resource")
	a.TenantID = field.NewString(table, "tenant_id")
	a.UserID = field.NewString(table, "user_id")
	a.DeployTime = field.NewInt64(table, "deploy_time")
	a.CreateTime = field.NewTime(table, "create_time")
	a.UpdateTime = field.NewTime(table, "update_time")

	a.fillFieldMap()

	return a
}

func (a *actReProcdef) WithContext(ctx context.Context) *actReProcdefDo {
	return a.actReProcdefDo.WithContext(ctx)
}

func (a actReProcdef) TableName() string { return a.actReProcdefDo.TableName() }

func (a actReProcdef) Alias() string { return a.actReProcdefDo.Alias() }

func (a *actReProcdef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actReProcdef) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["proc_def_id"] = a.ProcDefID
	a.fieldMap["proc_def_key"] = a.ProcDefKey
	a.fieldMap["name"] = a.Name
	a.fieldMap["version"] = a.Version
	a.fieldMap["resource"] = a.Resource
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["deploy_time"] = a.DeployTime
	a.fieldMap["create_time"] = a.CreateTime
	a.fieldMap["update_time"] = a.UpdateTime
}

func (a actReProcdef) clone(db *gorm.DB) actReProcdef {
	a.actReProcdefDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actReProcdef) replaceDB(db *gorm.DB) actReProcdef {
	a.actReProcdefDo.ReplaceDB(db)
	return a
}

type actReProcdefDo struct{ gen.DO }

func (a actReProcdefDo) Debug() *actReProcdefDo {
	return a.withDO(a.DO.Debug())
}

func (a actReProcdefDo) WithContext(ctx context.Context) *actReProcdefDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actReProcdefDo) ReadDB() *actReProcdefDo {
	return a.Clauses(dbresolver.Read)
}

func (a actReProcdefDo) WriteDB() *actReProcdefDo {
	return a.Clauses(dbresolver.Write)
}

func (a actReProcdefDo) Session(config *gorm.Session) *actReProcdefDo {
	return a.withDO(a.DO.Session(config))
}

func (a actReProcdefDo) Clauses(conds ...clause.Expression) *actReProcdefDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actReProcdefDo) Returning(value interface{}, columns ...string) *actReProcdefDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actReProcdefDo) Not(conds ...gen.Condition) *actReProcdefDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actReProcdefDo) Or(conds ...gen.Condition) *actReProcdefDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actReProcdefDo) Select(conds ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actReProcdefDo) Where(conds ...gen.Condition) *actReProcdefDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actReProcdefDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *actReProcdefDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a actReProcdefDo) Order(conds ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actReProcdefDo) Distinct(cols ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actReProcdefDo) Omit(cols ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actReProcdefDo) Join(table schema.Tabler, on ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actReProcdefDo) LeftJoin(table schema.Tabler, on ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actReProcdefDo) RightJoin(table schema.Tabler, on ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actReProcdefDo) Group(cols ...field.Expr) *actReProcdefDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actReProcdefDo) Having(conds ...gen.Condition) *actReProcdefDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actReProcdefDo) Limit(limit int) *actReProcdefDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actReProcdefDo) Offset(offset int) *actReProcdefDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actReProcdefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *actReProcdefDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actReProcdefDo) Unscoped() *actReProcdefDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actReProcdefDo) Create(values ...*entity.ActReProcdef) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actReProcdefDo) CreateInBatches(values []*entity.ActReProcdef, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actReProcdefDo) Save(values ...*entity.ActReProcdef) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actReProcdefDo) First() (*entity.ActReProcdef, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActReProcdef), nil
	}
}

func (a actReProcdefDo) Take() (*entity.ActReProcdef, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActReProcdef), nil
	}
}

func (a actReProcdefDo) Last() (*entity.ActReProcdef, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActReProcdef), nil
	}
}

func (a actReProcdefDo) Find() ([]*entity.ActReProcdef, error) {
	result, err := a.DO.Find()
	return result.([]*entity.ActReProcdef), err
}

func (a actReProcdefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ActReProcdef, err error) {
	buf := make([]*entity.ActReProcdef, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actReProcdefDo) FindInBatches(result *[]*entity.ActReProcdef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actReProcdefDo) Attrs(attrs ...field.AssignExpr) *actReProcdefDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actReProcdefDo) Assign(attrs ...field.AssignExpr) *actReProcdefDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actReProcdefDo) Joins(fields ...field.RelationField) *actReProcdefDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actReProcdefDo) Preload(fields ...field.RelationField) *actReProcdefDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actReProcdefDo) FirstOrInit() (*entity.ActReProcdef, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActReProcdef), nil
	}
}

func (a actReProcdefDo) FirstOrCreate() (*entity.ActReProcdef, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ActReProcdef), nil
	}
}

func (a actReProcdefDo) FindByPage(offset int, limit int) (result []*entity.ActReProcdef, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actReProcdefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actReProcdefDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actReProcdefDo) Delete(models ...*entity.ActReProcdef) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actReProcdefDo) withDO(do gen.Dao) *actReProcdefDo {
	a.DO = *do.(*gen.DO)
	return a
}
